// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	models "elibrary/models"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// Dao is an autogenerated mock type for the Dao type
type Dao struct {
	mock.Mock
}

// GetBook provides a mock function with given fields: db, title
func (_m *Dao) GetBook(db *sql.DB, title string) (*models.BookDetail, error) {
	ret := _m.Called(db, title)

	if len(ret) == 0 {
		panic("no return value specified for GetBook")
	}

	var r0 *models.BookDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.DB, string) (*models.BookDetail, error)); ok {
		return rf(db, title)
	}
	if rf, ok := ret.Get(0).(func(*sql.DB, string) *models.BookDetail); ok {
		r0 = rf(db, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.BookDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.DB, string) error); ok {
		r1 = rf(db, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDao creates a new instance of Dao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *Dao {
	mock := &Dao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
